# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo
#

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    text_font_family: 'Orbitron'

    building_extrude_height: |                  # building extrude height logic
        function() { return feature.height || 70; }

    black_color:                  [1.000,1.000,1.000]
    dark_color:                   [0.995,0.995,0.995]
    mid_color:                    [0.990,0.990,0.990]
    midlight_color:               [0.985,0.985,0.985]
    extralight_color:             [0.980,0.980,0.980]
    light_color:                  [0.975,0.975,0.975]
    lighter_color:                [0.970,0.970,0.970]
    lightest_color:               [0.965,0.965,0.965]
    ultralight_color:             [0.960,0.960,0.960]
    offwhite_color:               [0.955,0.955,0.955]
    white_color:                  [0.950,0.950,0.950]

    roads_text_fill:              [0.150,0.150,0.150]
    roads_text_stroke:            [0.980,0.980,0.980]

    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }

    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }

# Fonts
fonts:
    Orbitron:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
          url: fonts/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff

    Cairo:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
          url: fonts/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff

    Aldrich:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/aldrich/v6/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff
          url: fonts/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff



scene:
    background:
        color: [0.950,0.950,0.950]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 16
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 15

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: stripes-earth
                order: global.feature_order
                color: [0.650,0.650,0.650]

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                # style: waves-black
                style: waves-white
                color: [0.700,0.700,0.700]
                order: global.feature_order

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [1],  area: { min: 10000000000 } }
                    - { $zoom: [2],  area: { min: 7000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: [3],  area: { min: 5000000000 } }
                    - { $zoom: [4],  area: { min: 300000000 } }
                    - { $zoom: [5],  area: { min: 50000000 } }
                    - { $zoom: [6],  area: { min: 50000000 } }
                    - { $zoom: [7],  area: { min: 50000000 } }
                    - { $zoom: [8],  area: { min: 50000000 } }
                    - { $zoom: [9],  area: { min: 15000000 } }
                    - { $zoom: [10], area: { min: 4000000 } }
                    - { $zoom: [11], area: { min: 1000000 } }
                    - { $zoom: [12], area: { min: 250000 } }
                    - { $zoom: [13], area: { min: 150000 } }
                    - { $zoom: [14], area: { min: 40000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    color: [0.700,0.700,0.700]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: [0.700,0.700,0.700]

    roads:
        data: { source: mapzen, layer: roads }
        draw:
            lines:
                visible: true
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 352
            text-blend-order:
                text_source: global.ux_language_text_source
                visible: false    # labels are enabled by each layer below
                font:
                    family: Cairo
                    weight: normal
                    fill: global.roads_text_fill

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    #cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    color: [[5, global.mid_color], [6, global.black_color]]
                    width: [[5, 0.5px], [6, 0.5px], [7, 0.75px]]
                    outline:
                        color: global.mid_color
                        width: [[9, 0px], [10, 0px], [12, 1px], [16, 2px]]
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [[5, global.light_color], [7, global.mid_color]]
                        width: [[5, 0.25px], [7, 0.5px]]
                        # outline:
                        #     width: [[8, 0.0px], [9, 0.0px], [11, .5px], [16, .75px]]
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: global.offwhite_color
                        width: 0.5px
                        # outline:
                        #     width: [[12, 0px], [14, .5px], [17, 1px]]
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false
                        # color: global.light_color
                        # width: 0.5px
                        # outline:
                        #     width: 0px
        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[8, global.black_color], [13, global.black_color], [14, global.white_color]]
                    width: [[8, 1px], [13, 1.25px], [14, 0.1px], [15, 1.5px], [17, 8px], [18, 10m]]
                    outline:
                        color: [[8, global.white_color], [12, global.white_color], [13, global.black_color]]
                        width: [[8, 0px], [13, 0px], [14, 1px], [15, 2px], [19, 6px]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[9, global.mid_color], [13, global.mid_color], [14, global.white_color]]
                        width: [[9, 0px], [13, 0.75px], [14, 0.1px], [17, 4px], [18, 5m]]
                        outline:
                            color: [[9, global.white_color], [12, global.white_color], [13, global.mid_color], [15, global.black_color]]
                            width: [[9, 0px], [13, 0px], [14, 0.4px], [17, 1.5px], [18, 2px]]
                early_link:
                    filter: { $zoom: {min: 13, max: 15} }
                    draw:
                        lines:
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            color: [[13, global.light_color], [14, global.ultralight_color]]
                            outline:
                                color: [[12, global.white_color], [13, global.light_color]]
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [[13, global.light_color], [14, global.ultralight_color]]
                        outline:
                            color: [[12, global.white_color], [13, global.light_color]]
            highway_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-highway-z14:
                filter: { $zoom: { min: 14 } }
                draw:
                    text-blend-order:
                        priority: 50
                        text_source: global.ux_language_text_source
                        visible: true
                        font:
                            family: Aldrich
                            size: [[15,12px],[20,14px]]
                            stroke: { color: global.roads_text_stroke, width: 6px }

        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    color: [[8, global.black_color], [13, global.black_color], [17, global.white_color]]
                    width: [[13, 1px], [14, 1px], [16, 2.5px], [17, 3px]]
                    outline:
                        width: [[12, 0px], [13, 0.5px], [15, 1px], [17, 2px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [[8, global.midlight_color], [12, global.mid_color], [13, global.black_color], [14, global.white_color]]
                        width: [[8, 0.5px], [11, 0.5px], [13, 1px], [14, 0.1px], [16, 2px], [17, 8px], [18, 10m]]
                        outline:
                            color: [[8, global.white_color], [12, global.white_color], [13, global.black_color]]
                            width: [[8, 0px], [13, 0px], [14, 0.75px], [16, 1.5px], [18, 4px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [[8, global.midlight_color], [12, global.mid_color], [13, global.black_color], [14, global.white_color]]
                            width: [[9, 0.5px], [13, 1px], [14, 0.1px], [15, 1.25px], [16, 2px], [17, 8px], [18, 10m]]
                            outline:
                                color: [[8, global.white_color], [12, global.white_color], [13, global.black_color]]
                                width: [[8, 0px], [13, 0px], [14, 0.75px], [15, 1.5px], [17, 3px], [18, 4px]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [[13, global.light_color], [14, global.ultralight_color]]
                                outline:
                                    color: [[12, global.white_color], [13, global.light_color]]
                    labels-trunk_primary-route-z14:
                        filter: { $zoom: { min: 14 } }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: true
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    family: Aldrich
                                    size: [[15,12px],[20,14px]]
                                    stroke: { color: global.roads_text_stroke, width: 4px }
                labels-trunk-primary-z14:
                    filter: { $zoom: 14 }
                    draw:
                        text-blend-order:
                            priority: 51
                            text_source: global.ux_language_text_source
                            visible: true
                            font:
                                size: 10px
                                stroke: { color: global.roads_text_stroke, width: 3px }

                labels-trunk-primary-z15:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            priority: 51
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            visible: true
                            font:
                                size: [[15,13px],[18,14px]]
                                stroke: { color: global.roads_text_stroke, width: [[15, 4px], [17, 6px]] }
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[10, global.mid_color], [15, global.light_color], [16, global.white_color]]
                        width: [[10, 0.5px], [12, 0.5px], [15, 1px], [16, 1.75px], [17, 3px], [18, 5m]]
                        outline:
                            color: [[10, global.white_color], [15, global.mid_color], [16, global.black_color]]
                            width: [[10, 0px], [15, 0px], [16, 1px], [18, 2px]]
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [[13, global.light_color], [14, global.ultralight_color]]
                        outline:
                            color: [[12, global.white_color], [13, global.light_color]]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [[10, global.lighter_color], [13, global.midlight_color], [15, global.dark_color], [16, global.white_color]]
                        width: [[10, 0.5px], [12, 0.5px], [14, 1px], [15, 1.5px], [16, 0.1px], [17, 7.5px], [18, 9m]]
                        outline:
                            color: [[10, global.white_color], [14, global.white_color], [15, global.black_color]]
                            width: [[10, 0px], [15, 0px], [16, 1.1px], [17, 2px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: 353 #function() { return feature.sort_rank + 2; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [[10, global.lighter_color], [13, global.mid_color], [15, global.black_color], [16, global.white_color]]
                            width: [[10, 0.5px], [13, 1px], [15, 1.5px], [16, 0.1px], [17, 7.5px], [18, 9m]]
                            outline:
                                color: [[10, global.white_color], [14, global.white_color], [15, global.black_color]]
                                width: [[10, 0px], [15, 0px], [16, 1.5px], [17, 2px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                                outline:
                                    color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
                    labels-secondary-routes-z15-up:
                        filter: { $zoom: { min: 15 } }
                        draw:
                            text-blend-order:
                                priority: 56
                                visible: true
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                font:
                                    size: [[13,10px],[15,13px],[18,14px]]
                                    stroke: { color: global.roads_text_stroke, width: 4px }
                labels-secondary:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: true
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                size: [[15,13px],[18,14px]]
                                stroke: { color: global.roads_text_stroke, width: 4px }
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [[11, global.lighter_color], [15, global.dark_color], [16, global.white_color]]
                        width: [[11, 0.5px], [15, 1.25px], [16, 0.1px], [17, 6px], [18, 9m]]
                        outline:
                            color: [[11, global.white_color], [14, global.white_color], [15, global.black_color]]
                            width: [[11, 0px], [15, 0px], [16, 1px], [17, 2px], [18, 2px]]
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 3; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [[11, global.lighter_color], [15, global.dark_color], [16, global.white_color]]
                            width: [[11, 0.5px], [15, 1.25px], [16, 0.1px], [17, 6px], [18, 9m]]
                            outline:
                                color: [[11, global.white_color], [14, global.white_color], [15, global.black_color]]
                                width: [[11, 0px], [15, 0px], [16, 1px], [17, 2px], [18, 2px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                                outline:
                                    color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [[14, global.light_color], [15, global.dark_color], [16, global.white_color]]
                            width: [[11, 0.0px], [15, 0.5px], [16, 0.1px], [18, 4.5m]]
                            outline:
                                color: [[11, global.white_color], [14, global.white_color], [15, global.black_color]]
                                width: [[11, 0px], [14, 0px], [16, 0.25px], [18, 2px]]
                labels-tertiary:
                    filter: { $zoom: { min: 16 } }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: true
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                size: [[15,10px],[18,14px]]
                                stroke: { color: global.roads_text_stroke, width: 5px }
        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[11, global.ultralight_color], [14, global.mid_color], [16, global.white_color]]
                    width: [[11, 0.35px], [13, 0.5px], [14, 1px], [15, 1px], [16, 0.1px], [17, 4px], [18, 9m]]
                    outline:
                        color: [[15, global.mid_color], [17, global.black_color]]
                        width: [[11, 0px], [15, 0px], [16, 0.75px], [17, 1.5px], [18, 1.5px]]
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        order: 350
                        outline:
                            order: 351
            # Is this junk code?
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round

            tunnel:
                filter: {is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                        outline:
                            color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-minor_road:
                filter: { $zoom: { min: 16 } }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: true
                        text_source: name
                        font:
                            size: [[15,10px],[18,14px]]
                            stroke: { color: global.roads_text_stroke, width: 4px }
        service_road:
            filter: { kind: minor_road, kind_detail: service, $zoom: { min: 13 } }
            draw:
                lines:
                    color: [[13, global.offwhite_color], [15, global.midlight_color], [16, global.white_color]]
                    width: [[13, 0px], [15, 0.75px], [16, 0.1px], [17, 2.5px], [18, 5m]]
                    outline:
                        color: [[13, global.white_color], [14, global.white_color], [15, global.mid_color], [18, global.black_color]]
                        width: [[13, 0px], [15, 0px], [16, 0.6px], [19, 1.5px]]
            labels-service_road:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 60
                        visible: true
                        text_source: name
                        font:
                            size: [[15,10px], [18,14px]]
                            stroke: { color: global.roads_text_stroke, width: 4px }

        path:
            filter:
                all:
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [steps, track, pier]
            draw:
                lines:
                    color: global.dark_color
                    width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
            early:
                filter:
                    $zoom: { max: 15 }
                draw:
                    lines:
                        order: 351
                        outline:
                            order: 350
            pedestrian:
                filter: { kind_detail: pedestrian }
                draw:
                    lines:
                        color: global.dark_color
                        width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
            footway:
                filter: { kind_detail: footway }
                draw:
                    lines:
                        color: global.dark_color
                        width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
                bridge:
                    filter: { is_bridge: true }
                    draw:
                        lines:
                            cap: round
                            outline:
                                color: [[13, global.light_color], [15, global.mid_color]]
                                cap: butt
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            color: global.mid_color
                            cap: butt
            labels-path:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 61
                        visible: true
                        text_source: name
                        font:
                            size: 11px
                            stroke: { color: global.roads_text_stroke, width: 4px }
        track:
            filter: { kind: path, kind_detail: track }
            draw:
                lines:
                    color: global.dark_color
                    width: [[13, 0px], [16, 0.15px], [17, 2.5px], [20, 4m]]
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: butt
                        color: global.white_color
                        outline:
                            color: [[13, global.light_color], [15, global.black_color]]
                            cap: butt

            labels-track:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 61
                        visible: true
                        text_source: name
                        font:
                            size: 11px
                            stroke: { color: global.roads_text_stroke, width: 4px }

        steps:
            filter:
                all:
                    - kind: path
                    - kind_detail: steps
            draw:
                lines:
                    dash: [0.75, 0.25]
                    dash_background_color: global.dark_color
                    order: global.feature_order
                    color: [[15, global.light_color], [19, global.lightest_color]]
                    width: [[15, 0.5px], [18, 3px], [19, 1.5m]]
            labels-steps:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 62
                        visible: true
                        text_source: name
                        font:
                            size: 11px
                            stroke: { color: global.roads_text_stroke, width: 4px }

        railway:
            filter: { kind: rail, not: { kind_detail: [subway,light_rail,tram] } }
            draw:
                lines:
                    dash: [3.0, 1.5]
                    dash_background_color: [1.000,1.000,1.000]
                    color: [0.100,0.100,0.100]
                    width: [[13, 0px], [14, 0.5px], [18, 2px], [20, 4px]]
                    # let roads sort themselves past zoom 14
                    order: global.feature_order
                    # but give them all the same outline
                    outline:
                        order: 354
            bridges-tunnels:
                filter: { any: [is_bridge: true, is_tunnel: true] }
                draw:
                    lines:
                        outline:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: function() { return feature.sort_rank || 305; }
            service:
                filter: { service: true }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[14,0px],[15,0.5px],[18,2px]]


    landuse:
        data: { source: mapzen }
        draw:
            polygons:
                order: global.feature_order
                visible: false
            lines:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    style: stripes-green-angle
                    color: [0.580,0.580,0.580]
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        style: stripes-green-angle
                        color: [0.580,0.580,0.580]
                        visible: true

        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: ['2','3','5']}
            draw:
                polygons:
                    style: zigzag-green
                    color: [0.560,0.560,0.560]
                    # style: stripes-hatch
                    # color: [0.750,0.750,0.750]
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    style: stripes-green-angle
                    color: [0.580,0.580,0.580]
                    visible: true

        forest-landcover:
            filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
            draw:
                polygons:
                    style: stripes-green-horizontal
                    color: [0.540,0.540,0.540]
                    visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    # style: zigzag-green
                    # color: [0.500,0.500,0.500]
                    style: diagonal-stripes-weave
                    color: [0.980,0.980,0.980]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: national_park
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        style: diagonal-stripes-weave
                        color: [0.980,0.980,0.980]
                        visible: true

    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: 329
                color: [0.350,0.350,0.350]
            lines:
                visible: false
                order: 329

        footprints:
            filter:
                any:
                    - { $zoom: [13], scale_rank: [1] }
                    - { $zoom: [14], scale_rank: [1,2] }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], area: { min: 5000 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 100 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 }, area: true }
            draw:
                polygons:
                    style: stripes-buildings
                    visible: true

            extrude:
                filter:
                    all:
                        - $zoom: { min: 15 }
                        - height: { min: 200 }
                        - not:
                            - layer: [-1, -2, -3, -4, -5]
                draw:
                    polygons:
                        style: stripes-gradient
                        visible: true
                        color: [0.500,0.500,0.500]
                        extrude: global.building_extrude_height

    boundaries:
        data: { source: mapzen, layer: boundaries }
        # country subdivisions (states, provinces)
        draw:
            lines:
                order: global.feature_order
        country:
            filter:
                any:
                    - kind: country
                    - admin_level: 2
            draw:
                country-outerline:
                    style: lines
                    order: function() { return (feature.sort_rank -1); }
                    color: global.black_color
                    width: [[0, 0px], [4, 2px], [8, 6px], [14, 8px], [17, 16m]]
                lines:
                    color: [0.900,0.900,0.900]
                    width: [[0, 0px], [5, 0px], [6, 1px], [14, 15px]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    country-outerline:
                        visible: false
                    lines:
                        visible: false
            # country-labels:
            #     filter: { name: true, $zoom: { min: 8 }, not: { maritime_boundary: true } }
            #     draw:
            #         text-blend-order:
            #             priority: 2
            #             visible: global.text_visible_admin
            #             text_source: global.ux_language_text_source_boundary_lines_left_right
            #             offset: [[8, [0, 7px]], [11, [0, 8px]], [12, [0, 9px]]]
            #             text_wrap: 100
            #             font:
            #                 family: global.text_font_family
            #                 size: 10px
            #                 fill: global.black_color
            #                 transform: uppercase
            #     no-left-right:
            #         filter: { "name:left": false, "name:right": false }
            #         draw:
            #             text-blend-order:
            #                 text_source: global.ux_language_text_source_boundary_lines
            #                 offset: 0px

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                lines:
                    dash: [1.25, 1.25]
                    order: global.feature_order
                    color: global.black_color
                    width: [[1,0.2px],[9,1.5px],[17,10m]]
            disputed:
                filter: { kind: [disputed, line_of_control] }
                draw:
                    lines:
                        dash: [2.0, 1.0]
                        order: global.feature_order
                        # style: lines-dots
                        color: global.black_color
                        width: [[1, 1px], [9, 4px], [17,14m]]

        region:
            filter:
                any:
                    - kind: [region,macroregion]
                    - kind_detail: [3,4]
            draw:
                lines:
                    color: global.black_color
                    # width: [[0, 0.5px], [9, 2px], [14, 4px], [16, 6.5px], [17, 16m]]
                    width: [[0, 0.5px], [14, 2px], [16, 7px], [17, 17m]]

            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false

            dash-borders:
                filter:
                    $zoom: { min: 7 }
                draw:
                    lines:
                        dash: [7.0, 3.0]

            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false

        #     region-labels:
        #         filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
        #         draw:
        #             text-blend-order:
        #                 priority: 3
        #                 visible: global.text_visible_admin
        #                 text_source: global.ux_language_text_source_boundary_lines_left_right
        #                 offset: [[8,[0, 5px]], [11, [0, 6px]], [12,[0, 7px]]]
        #                 text_wrap: 100
        #                 # offset: [0px, 10px]
        #                 # anchor: top
        #                 font:
        #                     family: global.text_font_family
        #                     size: 9px
        #                     fill: global.mid_color
        #                     transform: uppercase
        #         no-left-right:
        #             filter: { "name:left": false, "name:right": false }
        #             draw:
        #                 text-blend-order:
        #                     text_source: global.ux_language_text_source_boundary_lines
        #                     offset: 0px

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: [0.000,0.000,0.000]
            # END NOTE

        populated-places:
            filter:
                kind: locality
            draw:
                text-blend-order:
                    visible: true
                    buffer: 42px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: [1.000,1.000,1.000], width: 5px }

            # _text_early:
            #     filter: { $zoom: { max: 11 } }
            #     draw:
            #         text-blend-order:
            #             visible: false


            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,15px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,14px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,14px],[8,15px],[12,18px],[13,0px]]
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px],[14, 12px],[15, 0px]]
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]

        neighbourhoods:
            filter:
                all:
                    - kind:
                        - borough
                        - macrohood
                        - neighbourhood
                        #- microhood       # until Tenderloin microhoods are cleaned up, ban this placetype
                    - $zoom: { min: 10, max: 17 }
                    - is_landuse_aoi: false
                    - function() { return (feature.min_zoom <= ($zoom+0.5) && feature.max_zoom >= ($zoom+1)) }
            draw:
                text-blend-order:
                    visible: true
                    priority: 29
                    buffer: 8px
                    text_wrap: 10
                    max_lines: 2
                    font:
                        fill: [0.450,0.450,0.450]
                        size: [[11, 9px], [12, 10px], [13, 12px], [14, 16px], [16, 24px]]
                        weight: normal
                        transform: uppercase
                        stroke: { color: [0.980,0.980,0.980], width: [[12, 4px], [13, 6px], [15, 8px]] }

            z13-up:
                filter:
                    $zoom: { min: 13 }
                draw:
                    text-blend-order:
                        font:
                            weight: 300

                low_quality_kind_tile_rank:
                    filter:
                        kind_tile_rank: { min: 8 }
                    draw:
                        text-blend-order:
                            visible: false

                z14-up:
                    filter:
                        $zoom: { min: 14 }
                    draw:
                        text-blend-order:
                            text_wrap: 9
                            visible: true

                    z15-up:
                        filter:
                            $zoom: { min: 15 }
                            min_zoom: { min: 15 }
                        draw:
                            text-blend-order:
                                priority: 19
                                font:
                                    size: 13px

styles:
    lines_transparent:
        base: lines
        blend: overlay

    text-blend-order:
        base: text
        blend_order: 10

    waves-black:
        base: polygons
        mix: [space-screen, patterns-stripes]
        shaders:
            blocks:
                color: |
                    vec2 pos = getScreenNonStretchCoords();
                    pos.y += sin(pos.x*30.)*.01;
                    color.rgb = mix(color.rgb, vec3(0.000),stripes(pos*100.,.4));

    waves-white:
        base: polygons
        mix: [space-screen, patterns-stripes]
        shaders:
            blocks:
                color: |
                    vec2 pos = getScreenNonStretchCoords();
                    pos.y += sin(pos.x*30.)*.01;
                    color.rgb = mix(color.rgb, vec3(0.950),stripes(pos*70.,.2));

    stripes-earth:
        base: polygons
        mix: [functions-aastep, pallete, patterns-stripes, space-screen]
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 2.
                STRIPES_ANGLE: 1.570796325
            blocks:
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,vec3(0.940),stripes(st*200.,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE));

    zigzag-green:
        base: polygons
        mix: [functions-aastep, patterns-zigzag, space-screen]
        shaders:
            defines:
                ZIGZAG_WIDTH: .4
                ZIGZAG_ALPHA: 1.0
                ZIGZAG_SCALE: 30.
                ZIGZAG_FREQ: 1.
            blocks:
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,vec3(0.950),zigzag(st*130.,
                                        ZIGZAG_FREQ,
                                        ZIGZAG_WIDTH));


    stripes-buildings:
        base: polygons
        mix: [functions-aastep, pallete, patterns-stripes, space-screen]
        # blend: overlay
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 2.
                STRIPES_ANGLE: 1.570796325
            blocks:
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,vec3(0.930),stripes(st*200.,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE));

    diagonal-stripes-weave:
        base: polygons
        mix: [patterns-stripes, space-constant]
        blend: inlay
        shaders:
            defines:
                GRAIN_AMOUNT: 2.
                NUM_OCTAVES: 2
            blocks:
                color: |
                    color = mix(color,vec4(0.),diagonalStripes(getConstantCoords()*150.))*.15;

    stripes-hatch:
        base: polygons
        mix: [functions-aastep, pallete, patterns-stripes, space-screen]
        shaders:
            blocks:
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,background,diagonalStripes(st*300.));

    stripes-green-angle:
        base: polygons
        mix: [functions-aastep, pallete, patterns-stripes, space-screen]
        shaders:
            defines:
                STRIPES_WIDTH: 0.5
                STRIPES_ALPHA: .5
                STRIPES_SCALE: 2.
                STRIPES_ANGLE: 0.7853981634
            blocks:
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,vec3(0.950,0.950,0.950),stripes(st*180.,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE));

    stripes-green-horizontal:
        base: polygons
        mix: [functions-aastep, pallete, patterns-stripes, space-screen]
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_ALPHA: .5
                STRIPES_SCALE: 2.
                STRIPES_ANGLE: 3.14159265
            blocks:
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,vec3(0.950,0.950,0.950),stripes(st*180.,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE));

    pallete:
        shaders:
            blocks:
                global: |
                    // Common Values
                    //================================
                    float radio = 0.05;
                    vec2 size = vec2(1.,.6);
                    vec3 background = vec3(0.950);
                    vec3 midle = vec3(0.824, 0.812, 0.804);
                    vec3 foreground = vec3(0.275,0.298,0.251);

    lines-stripes:
        ui:
            shaders:
                defines:
                    STRIPES_WIDTH:
                        type: number
                        label: Width
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    STRIPES_COLOR: 
                        type: color
                        label: Color
                    STRIPES_BACKGROUND_COLOR: 
                        type: color
                        label: 'Background Color'
        base: lines
        texcoords: true
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_COLOR: color.rgb*.15
                STRIPES_BACKGROUND_COLOR: color.rgb
            blocks:
                color: |
                    color.rgb = mix(STRIPES_BACKGROUND_COLOR,
                                    STRIPES_COLOR,
                                    step(STRIPES_WIDTH, sin((fract(v_texcoord).x+fract(v_texcoord).y) * 6.283)));

    stripes:
        base: polygons
        shaders:
            blocks:
                global: |

                    // Stripes
                    //=============================
                    float stripes(vec2 st,float width){
                        return step(width,1.0-abs(sin(st.y*3.14159265358)));
                    }

    stripes-gradient:
        base: polygons
        mix: stripes
        texcoords: true
        blend: overlay
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    color.rgb += vec3(min((v_world_position.z*.001 + 1.0),3.));
                    color.rgb = mix(color.rgb,vec3(0.00,0.00,0.00),stripes(st*16.,st.y*0.7) );
                    
                    if ( dot(vec3(0.,0.,1.),normal) == 1.0 ) {
                        // If it's a roof
                        color.rgb = vec3(0.940);
                    }

    space-screen:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the coordinates in screen space streaching the proportion ('vec2 getScreenCoords ()') or non-streatching the proportion ('getScreenNonStretchCoords ()')
            examples:
                press:
                    url: https://tangrams.github.io/tangram-sandbox/styles/press.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/press.png
                    lines: 136-145
                radar:
                    url: https://tangrams.github.io/tangram-sandbox/styles/radar.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/radar.png
                    lines: 0-143
        test:
            screen:
                blocks:
                    color: |
                        vec2 st = getScreenCoords();
                        color.rg += fract(st*3.);
            screen_nonstretch:
                blocks:
                    color: |
                        vec2 st = getScreenNonStretchCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 getScreenCoords () {
                        return gl_FragCoord.xy / u_resolution.xy;
                    }

                    vec2 getScreenNonStretchCoords () {
                        vec2 st = getScreenCoords();
                        if (u_resolution.y > u_resolution.x ) {
                            st.y *= u_resolution.y/u_resolution.x;
                            st.y -= (u_resolution.y*.5-u_resolution.x*.5)/u_resolution.x;
                        } else {
                            st.x *= u_resolution.x/u_resolution.y;
                            st.x -= (u_resolution.x*.5-u_resolution.y*.5)/u_resolution.y;
                        } 
                        return st;
                    }
                    #endif

    polygons-stripes:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply stripe pattern to the polygon style. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)
        ui:
            shaders:
                defines:
                    STRIPES_SCALE:
                        type: number
                        label: Scale
                        range:
                            min: 1.
                            max: 1000.
                            step: 1.
                    STRIPES_WIDTH:
                        type: number
                        label: Width
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    STRIPES_ALPHA:
                        type: number
                        label: Amount
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    STRIPES_ANGLE:
                        type: number
                        label: Angle (radiants)
                        range:
                            min: 0.
                            max: 3.1415
                            step: 0.1
        base: polygons
        mix: [patterns-stripes, space-tile]
        shaders:
            defines:
                STRIPES_WIDTH: .5
                STRIPES_ALPHA: .5
                STRIPES_SCALE: 2.
                STRIPES_ANGLE: PI*0.25
            blocks:
                color: |
                    color.a = stripes(  getTileCoords()*STRIPES_SCALE,
                                        STRIPES_WIDTH,
                                        STRIPES_ANGLE)*STRIPES_ALPHA;

    polygons-zigzag:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply stripe pattern to the polygon style. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)
        ui:
            shaders:
                defines:
                    ZIGZAG_SCALE:
                        type: number
                        label: Scale
                        range:
                            min: 1.
                            max: 1000.
                            step: 1.
                    ZIGZAG_WIDTH:
                        type: number
                        label: Width
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    ZIGZAG_ALPHA:
                        type: number
                        label: Amount
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    ZIGZAG_FREQ:
                        type: number
                        label: Frequency
                        range:
                            min: 0.
                            max: 100.
                            step: 1.
        base: polygons
        mix: [patterns-zigzag, space-tile]
        shaders:
            defines:
                ZIGZAG_WIDTH: .2
                ZIGZAG_ALPHA: 1.0
                ZIGZAG_SCALE: 30.
                ZIGZAG_FREQ: 1.
            blocks:
                color: |
                    color.a = zigzag(  getTileCoords()*ZIGZAG_SCALE,
                                        ZIGZAG_FREQ,
                                        ZIGZAG_WIDTH)*ZIGZAG_ALPHA;

    patterns-stripes:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Collection of functions to draw stripes. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)
            examples:
                grain-area:
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain-area.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain-area.png
                    lines: 26
                press:
                    url: https://tangrams.github.io/tangram-sandbox/styles/press.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/press.png
                    lines: 150
                radar:
                    url: https://tangrams.github.io/tangram-sandbox/styles/radar.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/radar.png
        mix: [functions-aastep, geometry-matrices]
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // Return a distance function of stripes
                    float stripesDF (vec2 st) {
                        return abs(sin(st.y*PI));
                    }

                    // Adjustable width stripes
                    float stripes (vec2 st, float width) {
                        return aastep(width, stripesDF(st));
                    }

                    // Adjustable Angle
                    float stripes (vec2 st, float width, float angle) {
                        st = rotate2D(angle) * st;
                        return stripes(st, width);
                    }

                    // Faster optimisation of diagonal stripes
                    float diagonalStripes (vec2 st) {
                        vec2 i_st = floor(st);
                        vec2 f_st = fract(st);
                        if (mod(i_st.y,2.) - mod(i_st.x,2.) == 0.) {
                            return 1.0 - aastep(f_st.x,f_st.y);
                        } else {
                            return aastep(f_st.x,f_st.y);
                        }
                    }

                    // Faster optimisation of diagonal stripes with controlable width
                    float diagonalStripes (vec2 st, float width) {
                        st.y -= st.x;
                        return stripes(st, width);
                    }

    patterns-zigzag:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Collection of functions to draw zigzag stripes. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/) 
        mix: patterns-stripes
        shaders:
            blocks:
                global: |
                    // Return a distance function of stripes
                    float zigzagDF (vec2 st, float freq) {
                        vec2 pos = fract(st);
                        pos.y += mix(fract(pos.x),fract(1.0-pos.x),step(.5,pos.x))*freq;
                        return stripesDF(pos);
                    }
                    //
                    // Adjustable width stripes
                    float zigzag (vec2 st, float freq, float width) {
                        return aastep(width, zigzagDF(st, freq));
                    }

    space-constant:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the constant coordinates **(warning: could glitch on zooms)**
            examples:
                grain-area:
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain-area.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain-area.png
                    lines: 26
        test:
            constant: 
                blocks:
                    color: |
                        vec2 st = getConstantCoords();
                        color.rg += fract(st*3.);

        shaders:
            blocks:
                global: |
                    vec2 getConstantCoords () {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = gl_FragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                        #else
                        return vec2(0.0,0.0);
                        #endif
                    }

    block:
        shaders:
            defines:
                ADD: '+'
                SUBTRACT: '-'
                MULTIPLY: '*'

                PI: 3.1415926535897932384626433832795
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163

                EPSILON: 0.0000001

                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)

    filter-grain:
        mix: [block, generative-fbm]
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply a lens grain effect to the scene.
            examples:
                grain:
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain.png
                    lines: 29
        ui:
            shaders:
                defines:
                    GRAIN_AMOUNT: 
                        type: number
                        label: Amount
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    GRAIN_BLEND: 
                        type: dropdownArray
                        label: 'Blend mode'
                        values: ['ADD', 'SUBTRACT', 'MULTIPLY']

        test:
            grain: { uniforms: { u_tex0: "https://tangrams.github.io/blocks/test.jpg" }, blocks: { color: "    color = texture2D(u_tex0,v_texcoord.xy);" } }

        shaders:
            defines:
                GRAIN_AMOUNT: .3
                GRAIN_BLEND: 'SUBTRACT'
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    float grain () {
                        vec2 pos = gl_FragCoord.xy;
                        vec2 st = pos/u_resolution.xy-vec2(.5);
                        return dot(st,st)+(fbm(pos*0.6)*0.1);
                    }
                    #endif
                filter: |
                    // Apply the grain in the amount defined on GRAIN_AMOUNT
                    color.rgb = color.rgb GRAIN_BLEND (grain()*GRAIN_AMOUNT);

    generative-fbm:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Set of Fractal Brownian Motion functions.
                For more information on this theme read [this chapter of The Book of Shaders about fractal Brownian Motion](http://thebookofshaders.com/13/).
        test:
            fbm_float_5oct: { blocks: { color: "    color.rgb += fbm(v_texcoord.x);" } }
            fbm_vec2_5oct: { blocks: { color: "    color.rgb += fbm(v_texcoord);" } }
            fbm_vec3_5oct: { blocks: { color: "    color.rgb += fbm(vec3(v_texcoord,u_time));" } }
            fbm_float_3oct: { defines: { NUM_OCTAVES: 3 }, blocks: { color: "    color.rgb += fbm(v_texcoord.x);" } }
            fbm_vec2_3oct: { defines: { NUM_OCTAVES: 3 }, blocks: { color: "    color.rgb += fbm(v_texcoord);" } }
            fbm_vec3_3oct: { defines: { NUM_OCTAVES: 3 }, blocks: { color: "    color.rgb += fbm(vec3(v_texcoord,u_time));" } }
            fbm_float_8oct: { defines: { NUM_OCTAVES: 8 }, blocks: { color: "    color.rgb += fbm(v_texcoord.x);" } }
            fbm_vec2_8oct: { defines: { NUM_OCTAVES: 8 }, blocks: { color: "    color.rgb += fbm(v_texcoord);" } }
            fbm_vec3_8oct: { defines: { NUM_OCTAVES: 8 }, blocks: { color: "    color.rgb += fbm(vec3(v_texcoord,u_time));" } }

        mix: generative-noise
        shaders:
            defines:
                NUM_OCTAVES: 5
            blocks:
                global: |
                    // Fractional Brownian motion for 1, 2 and 3 dimensions
                    float fbm (in float x) {
                        float v = 0.0;
                        float a = 0.5;
                        float shift = float(100.0);
                        for (int i = 0; i < int(NUM_OCTAVES); ++i) {
                            v += a * noise(x);
                            x = x * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }
                    float fbm (in vec2 xy) {
                        float v = 0.0;
                        float a = 0.5;
                        vec2 shift = vec2(100.0);
                        mat2 rot = mat2(cos(0.5), sin(0.5), 
                                        -sin(0.5), cos(0.50));
                        for (int i = 0; i < int(NUM_OCTAVES); ++i) {
                            v += a * noise(xy);
                            xy = rot * xy * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }
                    float fbm (in vec3 xyz) {
                        float v = 0.0;
                        float a = 0.5;
                        vec3 shift = vec3(100.0);
                        for (int i = 0; i < int(NUM_OCTAVES); ++i) {
                            v += a * noise(xyz);
                            xyz = xyz * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }

    generative-noise:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Set of Noise functions.
                For more information on this theme read [this chapter of The Book of Shaders about Noise](http://thebookofshaders.com/11/).
        test:
            noise_float: { blocks: { color: "    color.rgb += noise(v_texcoord.x*2.);" } }
            noise_vec2: { blocks: { color: "    color.rgb += noise(v_texcoord.xy*2.);" } }
            noise_vec3: { blocks: { color: "    color.rgb += noise(vec3(v_texcoord.xy*2.,u_time));" } }
            gnoise_vec2: { blocks: { color: "    color.rgb += gnoise(v_texcoord.xy*2.);" } }
            gnoise_vec3: { blocks: { color: "    color.rgb += gnoise(vec3(v_texcoord.xy*2.,u_time));" } }
            snoise_vec2: { blocks: { color: "    color.rgb += snoise(v_texcoord.xy*2.);" } }
            snoise_vec3: { blocks: { color: "    color.rgb += snoise(vec3(v_texcoord.xy*2.,u_time));" } }
            noise_float_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(v_texcoord.x*2.);" } }
            noise_vec2_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(v_texcoord.xy*2.);" } }
            noise_vec3_t: { defines: { NOISE_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += noise(vec3(v_texcoord.xy,u_time)*2.);" } }

        mix: generative-random
        shaders:
            defines:
                NOISE_TEXSAMPLE_SIZE: 256.0
            blocks:
                global: |
                    // Value Noise 
                    float noise (in float x) {
                        #ifdef NOISE_TEXSAMPLE
                        return texture2D(u_random, vec2(x*(1./NOISE_TEXSAMPLE_SIZE))).r;
                        #else
                        float i = floor(x);
                        float f = fract(x);
                        f = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), f);
                        #endif
                    }

                    // Value Noise
                    float noise (vec2 p) {
                        vec2 i = floor(p);
                        vec2 f = fract(p);
                        #ifdef NOISE_TEXSAMPLE
                        vec2 uv = i.xy + f.xy*f.xy*(3.0-2.0*f.xy);
                        return texture2D(u_random, fract((uv+118.4)/NOISE_TEXSAMPLE_SIZE) ).x;
                        #else
                        f = f * f * (3.0 - 2.0 * f);
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        return mix(a, b, f.x) + (c - a) * f.y * (1.0 - f.x) + (d - b) * f.x * f.y;
                        #endif
                    }

                    // Value Noise
                    float noise (vec3 p) {
                        vec3 i = floor(p);
                        vec3 f = fract(p);
                        f = f*f*(3.0-2.0*f);
                        #ifdef NOISE_TEXSAMPLE
                        vec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;
                        vec2 rg = texture2D(u_random, fract((uv+.5)/NOISE_TEXSAMPLE_SIZE), -100.0 ).yx;
                        return mix( rg.x, rg.y, f.z );
                        #else
                        float n = i.x + i.y*57.0 + 113.0*i.z;
                        return mix(mix(mix(random(n+0.0),random(n+1.0),f.x),mix(random(n+ 57.0),random(n+ 58.0),f.x),f.y),mix(mix(random(n+113.0),random(n+114.0),f.x),mix(random(n+170.0),random(n+171.0),f.x),f.y),f.z);
                        /*
                        const vec3 step = vec3(110.0, 241.0, 171.0);
                        float n = dot(i, step);
                        return mix( mix(mix(random(n + dot(step, vec3(0,0,0))),
                                            random(n + dot(step, vec3(1,0,0))), f.x),
                                        mix(random(n + dot(step, vec3(0,1,0))),
                                            random(n + dot(step, vec3(1,1,0))), f.x),
                                        f.y),
                                    mix(mix(random(n + dot(step, vec3(0,0,1))),
                                            random(n + dot(step, vec3(1,0,1))), f.x),
                                        mix(random(n + dot(step, vec3(0,1,1))),
                                            random(n + dot(step, vec3(1,1,1))), f.x),
                                    f.y),
                                f.z);
                                */
                        #endif
                    }

                    // Gradient Noise
                    // From IQ (https://www.shadertoy.com/view/XdXGW8)
                    float gnoise (in vec2 p) {
                        vec2 i = floor( p );
                        vec2 f = fract( p );
                        
                        vec2 u = f*f*(3.0-2.0*f);

                        return mix( mix( dot( random2( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                                         dot( random2( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                                    mix( dot( random2( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                                         dot( random2( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
                    }

                    // Gradient Noise
                    // From IQ (https://www.shadertoy.com/view/Xsl3Dl)
                    float gnoise (in vec3 p) {
                        vec3 i = floor( p );
                        vec3 f = fract( p );
                        vec3 u = f*f*(3.0-2.0*f);

                        return mix( mix( mix( dot( random3( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), 
                                              dot( random3( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
                                         mix( dot( random3( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), 
                                              dot( random3( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),
                                    mix( mix( dot( random3( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), 
                                              dot( random3( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
                                         mix( dot( random3( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), 
                                              dot( random3( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );
                    }

                    vec3 mod289(vec3 x) { 
                        return x - floor(x * (1.0 / 289.0)) * 289.0; 
                    }
                    vec2 mod289(vec2 x) { 
                        return x - floor(x * (1.0 / 289.0)) * 289.0; 
                    }
                    vec3 permute(vec3 x) { 
                        return mod289(((x*34.0)+1.0)*x); 
                    }

                    // Simplex Noise
                    // from Ian McEwan, Ashima Arts
                    float snoise(vec2 v) {

                        // Precompute values for skewed triangular grid
                        const vec4 C = vec4(0.211324865405187,
                                            // (3.0-sqrt(3.0))/6.0
                                            0.366025403784439,  
                                            // 0.5*(sqrt(3.0)-1.0)
                                            -0.577350269189626,  
                                            // -1.0 + 2.0 * C.x
                                            0.024390243902439); 
                                            // 1.0 / 41.0

                        // First corner (x0)
                        vec2 i  = floor(v + dot(v, C.yy));
                        vec2 x0 = v - i + dot(i, C.xx);

                        // Other two corners (x1, x2)
                        vec2 i1 = vec2(0.0);
                        i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);
                        vec2 x1 = x0.xy + C.xx - i1;
                        vec2 x2 = x0.xy + C.zz;

                        // Do some permutations to avoid
                        // truncation effects in permutation
                        i = mod289(i);
                        vec3 p = permute(
                                permute( i.y + vec3(0.0, i1.y, 1.0))
                                    + i.x + vec3(0.0, i1.x, 1.0 ));

                        vec3 m = max(0.5 - vec3(
                                            dot(x0,x0), 
                                            dot(x1,x1), 
                                            dot(x2,x2)
                                            ), 0.0);

                        m = m*m ;
                        m = m*m ;

                        // Gradients: 
                        //  41 pts uniformly over a line, mapped onto a diamond
                        //  The ring size 17*17 = 289 is close to a multiple 
                        //      of 41 (41*7 = 287)

                        vec3 x = 2.0 * fract(p * C.www) - 1.0;
                        vec3 h = abs(x) - 0.5;
                        vec3 ox = floor(x + 0.5);
                        vec3 a0 = x - ox;

                        // Normalise gradients implicitly by scaling m
                        // Approximation of: m *= inversesqrt(a0*a0 + h*h);
                        m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);

                        // Compute final noise value at P
                        vec3 g = vec3(0.0);
                        g.x  = a0.x  * x0.x  + h.x  * x0.y;
                        g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);
                        return 130.0 * dot(m, g);
                    }

                    // Simplex Noise
                    // from Ian McEwan, Ashima Arts
                    const float F3 =  0.3333333;
                    const float G3 =  0.1666667;
                    float snoise (vec3 p) {
                        vec3 s = floor(p + dot(p, vec3(F3)));
                        vec3 x = p - s + dot(s, vec3(G3));
                        vec3 e = step(vec3(0.0), x - x.yzx);
                        vec3 i1 = e*(1.0 - e.zxy);
                        vec3 i2 = 1.0 - e.zxy*(1.0 - e);
                        vec3 x1 = x - i1 + G3;
                        vec3 x2 = x - i2 + 2.0*G3;
                        vec3 x3 = x - 1.0 + 3.0*G3;
                        vec4 w, d;
                        w.x = dot(x, x);
                        w.y = dot(x1, x1);
                        w.z = dot(x2, x2);
                        w.w = dot(x3, x3);
                        w = max(0.6 - w, 0.0);
                        d.x = dot(random3(s), x);
                        d.y = dot(random3(s + i1), x1);
                        d.z = dot(random3(s + i2), x2);
                        d.w = dot(random3(s + 1.0), x3);
                        w *= w;
                        w *= w;
                        d *= w;
                        return dot(d, vec4(52.0));
                    }

    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the position on the tile
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    geometry-matrices:
        mix: [block]
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Useful set of functions to construct scale, rotation and translation of 2, 3 or 4 dimensions. For more information about matrices read [this chapter from The Book of Shaders](http://thebookofshaders.com/08/)
        shaders:
            blocks:
                global: |
                    // Rotate in 2, 3 and 4 dimensions
                    // ================================
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 rotate2D (vec2 st, float a) {
                        return (rotate2D(a)*(st-.5))+.5;
                    }
                    #endif
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat4 rotateX4D (float phi) {
                        return mat4(
                            vec4(1.,0.,0.,0),
                            vec4(0.,cos(phi),-sin(phi),0.),
                            vec4(0.,sin(phi),cos(phi),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat4 rotateY4D (float theta) {
                        return mat4(
                            vec4(cos(theta),0.,-sin(theta),0),
                            vec4(0.,1.,0.,0.),
                            vec4(sin(theta),0.,cos(theta),0.),
                            vec4(0.,0.,0.,1.));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                    mat4 rotateZ4D (float psi) {
                        return mat4(
                            vec4(cos(psi),-sin(psi),0.,0),
                            vec4(sin(psi),cos(psi),0.,0.),
                            vec4(0.,0.,1.,0.),
                            vec4(0.,0.,0.,1.));
                    }
                    //
                    // Scale 4 dimensions
                    // ================================
                    mat4 scale4D (float x, float y, float z) {
                        return mat4(
                            vec4(x,   0.0, 0.0, 0.0),
                            vec4(0.0, y,   0.0, 0.0),
                            vec4(0.0, 0.0, z,   0.0),
                            vec4(0.0, 0.0, 0.0, 1.0)
                        );
                    }
                    //
                    // Translate in 4 dimensions
                    mat4 translate4D (float x, float y, float z) {
                        return mat4(
                            vec4(1.0, 0.0, 0.0, 0.0),
                            vec4(0.0, 1.0, 0.0, 0.0),
                            vec4(0.0, 0.0, 1.0, 0.0),
                            vec4(x,   y,   z,   1.0)
                        );
                    }

    tools-tilecoords:
        shaders:
            blocks:
                global: |
                    // Varying to be added to both vertex and fragment shaders
                    varying vec2 v_pos;
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    vec2 TileCoords() {
                        return fract(v_pos);
                    }
                    #endif
                position: |
                    v_pos = modelPosition().xy;

    functions-zoom:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                when you mix this block to another block you can use the functions `zoom()` or `zoomEase()`. Both will help you to interpolate any values between the zooms `ZOOM_START` and `ZOOM_END`.
                By default `zoom()` and `zoomEase()` will return a `float `number between 0 and 1. But you can change it to interpolate any thing! Like `floats`, `vec2`, `vec3`, `vec4` and even other functions! For that you just need to change de `defines`: `ZOOM_IN`, and `ZOOM_OUT` to what ever you want to interpolate.
                `zoom()` use the cuadratic interpolation of `smoothstep()` but you can use `zoomEase()` to specify what type of **easing interpolation** you prefere. Just change the default `linear` function for any [easing functions describe here](#functions-easing) in the `ZOOM_FNC` define. Ex: `ZOOM_FNC: quadraticInOut`
        mix: [functions-easing]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 20.
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_OUT: 1.0
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }
                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    ZOOM_FNC( (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) ) );
                    }
    functions-easing:
        doc:
            author:
                name: StackGL
                url: http://stack.gl/
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Easing functions originally develop by Robert Penner's and transformed to GLSL by [StackGL](http://stack.gl/) in this repo: <https://github.com/stackgl/glsl-easings>
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                global: |
                    float linear (in float t) {
                        return t;
                    }
                    float exponentialIn (in float t) {
                        return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));
                    }
                    float exponentialOut (in float t) {
                        return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);
                    }
                    float exponentialInOut (in float t) {
                        return t == 0.0 || t == 1.0
                        ? t
                        : t < 0.5
                            ? +0.5 * pow(2.0, (20.0 * t) - 10.0)
                            : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;
                    }
                    float sineIn (in float t) {
                        return sin((t - 1.0) * HALF_PI) + 1.0;
                    }
                    float sineOut (in float t) {
                        return sin(t * HALF_PI);
                    }
                    float sineInOut (in float t) {
                        return -0.5 * (cos(PI * t) - 1.0);
                    }
                    float qinticIn (in float t) {
                        return pow(t, 5.0);
                    }
                    float qinticOut (in float t) {
                        return 1.0 - (pow(t - 1.0, 5.0));
                    }
                    float qinticInOut (in float t) {
                        return t < 0.5
                            ? +16.0 * pow(t, 5.0)
                            : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;
                    }
                    float quarticIn (in float t) {
                        return pow(t, 4.0);
                    }
                    float quarticOut (in float t) {
                        return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
                    }
                    float quarticInOut (in float t) {
                        return t < 0.5
                            ? +8.0 * pow(t, 4.0)
                            : -8.0 * pow(t - 1.0, 4.0) + 1.0;
                    }
                    float quadraticInOut (in float t) {
                        float p = 2.0 * t * t;
                        return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
                    }
                    float quadraticIn (in float t) {
                        return t * t;
                    }
                    float quadraticOut (in float t) {
                        return -t * (t - 2.0);
                    }
                    float cubicIn (in float t) {
                        return t * t * t;
                    }
                    float cubicOut (in float t) {
                        float f = t - 1.0;
                        return f * f * f + 1.0;
                    }
                    float cubicInOut (in float t) {
                        return t < 0.5
                            ? 4.0 * t * t * t
                            : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;
                    }
                    float elasticIn (in float t) {
                        return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));
                    }
                    float elasticOut (in float t) {
                        return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;
                    }
                    float elasticInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))
                            : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;
                    }
                    float circularIn (in float t) {
                        return 1.0 - sqrt(1.0 - t * t);
                    }
                    float circularOut (in float t) {
                        return sqrt((2.0 - t) * t);
                    }
                    float circularInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
                            : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
                    }
                    float bounceOut (in float t) {
                        const float a = 4.0 / 11.0;
                        const float b = 8.0 / 11.0;
                        const float c = 9.0 / 10.0;
                        const float ca = 4356.0 / 361.0;
                        const float cb = 35442.0 / 1805.0;
                        const float cc = 16061.0 / 1805.0;
                        float t2 = t * t;
                        return t < a
                        ? 7.5625 * t2
                        : t < b
                            ? 9.075 * t2 - 9.9 * t + 3.4
                            : t < c
                                ? ca * t2 - cb * t + cc
                                : 10.8 * t * t - 20.52 * t + 10.72;
                    }
                    float bounceIn (in float t) {
                        return 1.0 - bounceOut(1.0 - t);
                    }
                    float bounceInOut (in float t) {
                        return t < 0.5
                        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
                        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
                    }
                    float backIn (in float t) {
                        return pow(t, 3.0) - t * sin(t * PI);
                    }
                    float backOut (in float t) {
                        float f = 1.0 - t;
                        return 1.0 - (pow(f, 3.0) - f * sin(f * PI));
                    }
                    float backInOut (in float t) {
                        float f = t < 0.5
                        ? 2.0 * t
                        : 1.0 - (2.0 * t - 1.0);
                        float g = pow(f, 3.0) - f * sin(f * PI);
                        return t < 0.5
                        ? 0.5 * g
                        : 0.5 * (1.0 - g) + 0.5;
                    }

    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl) in this module <https://github.com/stackgl/glsl-aastep>
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }
